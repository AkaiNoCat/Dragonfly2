// Code generated by MockGen. DO NOT EDIT.
// Source: d7y.io/dragonfly/v2/cdn/supervisor (interfaces: SeedProgressMgr)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	supervisor "d7y.io/dragonfly/v2/cdn/supervisor"
	types "d7y.io/dragonfly/v2/cdn/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSeedProgressMgr is a mock of SeedProgressMgr interface.
type MockSeedProgressMgr struct {
	ctrl     *gomock.Controller
	recorder *MockSeedProgressMgrMockRecorder
}

// MockSeedProgressMgrMockRecorder is the mock recorder for MockSeedProgressMgr.
type MockSeedProgressMgrMockRecorder struct {
	mock *MockSeedProgressMgr
}

// NewMockSeedProgressMgr creates a new mock instance.
func NewMockSeedProgressMgr(ctrl *gomock.Controller) *MockSeedProgressMgr {
	mock := &MockSeedProgressMgr{ctrl: ctrl}
	mock.recorder = &MockSeedProgressMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeedProgressMgr) EXPECT() *MockSeedProgressMgrMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockSeedProgressMgr) Clear(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSeedProgressMgrMockRecorder) Clear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSeedProgressMgr)(nil).Clear), arg0)
}

// GetPieces mocks base method.
func (m *MockSeedProgressMgr) GetPieces(arg0 context.Context, arg1 string) ([]*types.SeedPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieces", arg0, arg1)
	ret0, _ := ret[0].([]*types.SeedPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieces indicates an expected call of GetPieces.
func (mr *MockSeedProgressMgrMockRecorder) GetPieces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieces", reflect.TypeOf((*MockSeedProgressMgr)(nil).GetPieces), arg0, arg1)
}

// InitSeedProgress mocks base method.
func (m *MockSeedProgressMgr) InitSeedProgress(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitSeedProgress", arg0, arg1)
}

// InitSeedProgress indicates an expected call of InitSeedProgress.
func (mr *MockSeedProgressMgrMockRecorder) InitSeedProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSeedProgress", reflect.TypeOf((*MockSeedProgressMgr)(nil).InitSeedProgress), arg0, arg1)
}

// PublishPiece mocks base method.
func (m *MockSeedProgressMgr) PublishPiece(arg0 context.Context, arg1 string, arg2 *types.SeedPiece) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPiece", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPiece indicates an expected call of PublishPiece.
func (mr *MockSeedProgressMgrMockRecorder) PublishPiece(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPiece", reflect.TypeOf((*MockSeedProgressMgr)(nil).PublishPiece), arg0, arg1, arg2)
}

// PublishTask mocks base method.
func (m *MockSeedProgressMgr) PublishTask(arg0 context.Context, arg1 string, arg2 *types.SeedTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTask indicates an expected call of PublishTask.
func (mr *MockSeedProgressMgrMockRecorder) PublishTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTask", reflect.TypeOf((*MockSeedProgressMgr)(nil).PublishTask), arg0, arg1, arg2)
}

// SetTaskMgr mocks base method.
func (m *MockSeedProgressMgr) SetTaskMgr(arg0 supervisor.SeedTaskMgr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTaskMgr", arg0)
}

// SetTaskMgr indicates an expected call of SetTaskMgr.
func (mr *MockSeedProgressMgrMockRecorder) SetTaskMgr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskMgr", reflect.TypeOf((*MockSeedProgressMgr)(nil).SetTaskMgr), arg0)
}

// WatchSeedProgress mocks base method.
func (m *MockSeedProgressMgr) WatchSeedProgress(arg0 context.Context, arg1 string) (<-chan *types.SeedPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSeedProgress", arg0, arg1)
	ret0, _ := ret[0].(<-chan *types.SeedPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSeedProgress indicates an expected call of WatchSeedProgress.
func (mr *MockSeedProgressMgrMockRecorder) WatchSeedProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSeedProgress", reflect.TypeOf((*MockSeedProgressMgr)(nil).WatchSeedProgress), arg0, arg1)
}
