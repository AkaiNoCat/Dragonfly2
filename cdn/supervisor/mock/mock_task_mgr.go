// Code generated by MockGen. DO NOT EDIT.
// Source: d7y.io/dragonfly/v2/cdnsystem/supervisor (interfaces: SeedTaskMgr)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "d7y.io/dragonfly/v2/cdn/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSeedTaskMgr is a mock of SeedTaskMgr interface.
type MockSeedTaskMgr struct {
	ctrl     *gomock.Controller
	recorder *MockSeedTaskMgrMockRecorder
}

// MockSeedTaskMgrMockRecorder is the mock recorder for MockSeedTaskMgr.
type MockSeedTaskMgrMockRecorder struct {
	mock *MockSeedTaskMgr
}

// NewMockSeedTaskMgr creates a new mock instance.
func NewMockSeedTaskMgr(ctrl *gomock.Controller) *MockSeedTaskMgr {
	mock := &MockSeedTaskMgr{ctrl: ctrl}
	mock.recorder = &MockSeedTaskMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeedTaskMgr) EXPECT() *MockSeedTaskMgrMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSeedTaskMgr) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSeedTaskMgrMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSeedTaskMgr)(nil).Delete), arg0)
}

// Exist mocks base method.
func (m *MockSeedTaskMgr) Exist(arg0 string) (*types.SeedTask, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(*types.SeedTask)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockSeedTaskMgrMockRecorder) Exist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockSeedTaskMgr)(nil).Exist), arg0)
}

// Get mocks base method.
func (m *MockSeedTaskMgr) Get(arg0 string) (*types.SeedTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*types.SeedTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSeedTaskMgrMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSeedTaskMgr)(nil).Get), arg0)
}

// GetPieces mocks base method.
func (m *MockSeedTaskMgr) GetPieces(arg0 context.Context, arg1 string) ([]*types.SeedPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieces", arg0, arg1)
	ret0, _ := ret[0].([]*types.SeedPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieces indicates an expected call of GetPieces.
func (mr *MockSeedTaskMgrMockRecorder) GetPieces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieces", reflect.TypeOf((*MockSeedTaskMgr)(nil).GetPieces), arg0, arg1)
}

// Register mocks base method.
func (m *MockSeedTaskMgr) Register(arg0 context.Context, arg1 *types.TaskRegisterRequest) (<-chan *types.SeedPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(<-chan *types.SeedPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSeedTaskMgrMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSeedTaskMgr)(nil).Register), arg0, arg1)
}
