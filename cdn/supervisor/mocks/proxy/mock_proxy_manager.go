// Code generated by MockGen. DO NOT EDIT.
// Source: d7y.io/dragonfly/v2/cdn/supervisor/proxy (interfaces: Manager)

// Package progress is a generated GoMock package.
package progress

import (
	context "context"
	reflect "reflect"

	task "d7y.io/dragonfly/v2/cdn/supervisor/task"
	source "d7y.io/dragonfly/v2/pkg/source"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddProxy mocks base method.
func (m *MockManager) AddProxy(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProxy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProxy indicates an expected call of AddProxy.
func (mr *MockManagerMockRecorder) AddProxy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProxy", reflect.TypeOf((*MockManager)(nil).AddProxy), arg0, arg1)
}

// ListProxies mocks base method.
func (m *MockManager) ListProxies() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProxies")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ListProxies indicates an expected call of ListProxies.
func (mr *MockManagerMockRecorder) ListProxies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxies", reflect.TypeOf((*MockManager)(nil).ListProxies))
}

// RemoveProxy mocks base method.
func (m *MockManager) RemoveProxy(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveProxy", arg0)
}

// RemoveProxy indicates an expected call of RemoveProxy.
func (mr *MockManagerMockRecorder) RemoveProxy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProxy", reflect.TypeOf((*MockManager)(nil).RemoveProxy), arg0)
}

// TryProxy mocks base method.
func (m *MockManager) TryProxy(arg0 context.Context, arg1 *task.SeedTask) (*source.Request, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryProxy", arg0, arg1)
	ret0, _ := ret[0].(*source.Request)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TryProxy indicates an expected call of TryProxy.
func (mr *MockManagerMockRecorder) TryProxy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryProxy", reflect.TypeOf((*MockManager)(nil).TryProxy), arg0, arg1)
}
