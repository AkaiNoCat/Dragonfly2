// Code generated by MockGen. DO NOT EDIT.
// Source: d7y.io/dragonfly/v2/cdn/supervisor/progress (interfaces: Manager)

// Package progress is a generated GoMock package.
package progress

import (
	context "context"
	reflect "reflect"

	task "d7y.io/dragonfly/v2/cdn/supervisor/task"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// PublishPiece mocks base method.
func (m *MockManager) PublishPiece(arg0 context.Context, arg1 string, arg2 *task.PieceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPiece", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPiece indicates an expected call of PublishPiece.
func (mr *MockManagerMockRecorder) PublishPiece(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPiece", reflect.TypeOf((*MockManager)(nil).PublishPiece), arg0, arg1, arg2)
}

// PublishTask mocks base method.
func (m *MockManager) PublishTask(arg0 context.Context, arg1 string, arg2 *task.SeedTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTask indicates an expected call of PublishTask.
func (mr *MockManagerMockRecorder) PublishTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTask", reflect.TypeOf((*MockManager)(nil).PublishTask), arg0, arg1, arg2)
}

// WatchSeedProgress mocks base method.
func (m *MockManager) WatchSeedProgress(arg0 context.Context, arg1 string) (<-chan *task.PieceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSeedProgress", arg0, arg1)
	ret0, _ := ret[0].(<-chan *task.PieceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSeedProgress indicates an expected call of WatchSeedProgress.
func (mr *MockManagerMockRecorder) WatchSeedProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSeedProgress", reflect.TypeOf((*MockManager)(nil).WatchSeedProgress), arg0, arg1)
}
