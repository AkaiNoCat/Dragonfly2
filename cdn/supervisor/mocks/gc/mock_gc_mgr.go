// Code generated by MockGen. DO NOT EDIT.
// Source: d7y.io/dragonfly/v2/cdn/supervisor/mgr (interfaces: GCMgr)

// Package mock is a generated GoMock package.
package gc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGCMgr is a mock of GCMgr interface.
type MockGCMgr struct {
	ctrl     *gomock.Controller
	recorder *MockGCMgrMockRecorder
}

// MockGCMgrMockRecorder is the mock recorder for MockGCMgr.
type MockGCMgrMockRecorder struct {
	mock *MockGCMgr
}

// NewMockGCMgr creates a new mock instance.
func NewMockGCMgr(ctrl *gomock.Controller) *MockGCMgr {
	mock := &MockGCMgr{ctrl: ctrl}
	mock.recorder = &MockGCMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCMgr) EXPECT() *MockGCMgrMockRecorder {
	return m.recorder
}

// GCTask mocks base method.
func (m *MockGCMgr) GCTask(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GCTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GCTask indicates an expected call of GCTask.
func (mr *MockGCMgrMockRecorder) GCTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GCTask", reflect.TypeOf((*MockGCMgr)(nil).GCTask), arg0, arg1)
}

// StartGC mocks base method.
func (m *MockGCMgr) StartGC(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartGC indicates an expected call of StartGC.
func (mr *MockGCMgrMockRecorder) StartGC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGC", reflect.TypeOf((*MockGCMgr)(nil).StartGC), arg0)
}
