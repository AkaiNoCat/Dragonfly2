# daemon alive time, when sets 0s, daemon will not auto exit
aliveTime: 0s

# daemon gc task running interval
gcInterval: 1m0s

# when daemon exit, keep peer task data or not
# it is usefully when upgrade daemon service, all local cache will be saved
keepStorage: true

# all addresses of all schedulers
# the schedulers of all daemons should be same in one region or zone.
# daemon will send tasks to a fixed scheduler by hashing the task url and meta data
# caution: only tcp is supported
scheduler:
  # below example is a stand address
  netAddrs:
  - type: tcp
    addr: __IP__:8002
  # schedule timeout
  scheduleTimeout: 10s

# when enable, pprof will be enabled,
verbose: true
console: false

# current host info used for scheduler
host:
  # tcp service listen address
  # port should be set by other options
  listenIP: 0.0.0.0
  # access ip for other peers
  # when local ip is different with access ip, advertiseIP should be set
  advertiseIP: __IP__
  # geographical location and network topology
  location: ""
  idc: ""
  securityDomain: ""
  netTopology: ""

# download service option
download:
  # download limit  per second
  totalRateLimit: 1024Mi
  perPeerRateLimit: 1024Mi
  # download grpc option
  downloadGRPC:
    # security option
    security:
      insecure: true
      cacert: ""
      cert: ""
      key: ""
      tlsConfig: null
    # download service listen address
    # current, only support unix domain socket
    unixListen:
      socket: /var/run/dfdaemon.sock
  # peer grpc option
  # peer grpc service send pieces info to other peers
  peerGRPC:
    security:
      insecure: true
      cacert: ""
      cert: ""
      key: ""
    tcpListen:
      # listen address
      listen: 0.0.0.0
      # listen port, daemon will try to listen
      # when this port is not available, daemon will try next port
      port: 65000
      # if want to limit upper port, please use blow format
#     port:
#       start: 65000
#       end: 65009

# proxy config file location or detail config
# proxy: ""

# upload service option
upload:
  defaultFilter: "Expires&Signature"
  # upload limit per second
  rateLimit: 200Mi
  security:
    insecure: true
    cacert: ""
    cert: ""
    key: ""
  tcpListen:
    # listen address
    listen: 0.0.0.0
    # listen port, daemon will try to listen
    # when this port is not available, daemon will try next port
    port: 65002
    # if want to limit upper port, please use blow format
#   port:
#     start: 65020
#     end: 65029

# peer task storage option
storage:
  # task data expire time
  # when there is no access to a task data, this task will be gc.
  taskExpireTime: 1m0s
  multiplex: true

# proxy service option
proxy:
  security:
    insecure: true
    cacert: ""
    cert: ""
    key: ""
  tcpListen:
    # Namespace stands the linux net namespace, like /proc/1/ns/net
    # It's useful for running daemon in pod with ip allocated and listen in host
    # Linux only
    namespace: ""
    # listen address
    listen: 0.0.0.0
    # listen port, daemon will try to listen
    # when this port is not available, daemon will try next port
    port: 65001
    # if want to limit upper port, please use blow format
  #   port:
  #     start: 65020
  #     end: 65029
  registryMirror:
    # url for the registry mirror
    url: https://index.docker.io
    # whether to ignore https certificate errors
    insecure: true
    # optional certificates if the remote server uses self-signed certificates
    certs: [ ]
    # whether to request the remote registry directly
    direct: false

  proxies:
  # proxy all http image layer download requests with dfget
  - regx: (blobs|manifests|config)/sha256.*
  - regx: __IP__.* # test only
