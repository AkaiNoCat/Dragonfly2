// Code generated by MockGen. DO NOT EDIT.
// Source: d7y.io/dragonfly/v2/scheduler/supervisor (interfaces: PeerManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	sync "sync"

	supervisor "d7y.io/dragonfly/v2/scheduler/supervisor"
	gomock "github.com/golang/mock/gomock"
)

// MockPeerManager is a mock of PeerManager interface.
type MockPeerManager struct {
	ctrl     *gomock.Controller
	recorder *MockPeerManagerMockRecorder
}

// MockPeerManagerMockRecorder is the mock recorder for MockPeerManager.
type MockPeerManagerMockRecorder struct {
	mock *MockPeerManager
}

// NewMockPeerManager creates a new mock instance.
func NewMockPeerManager(ctrl *gomock.Controller) *MockPeerManager {
	mock := &MockPeerManager{ctrl: ctrl}
	mock.recorder = &MockPeerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerManager) EXPECT() *MockPeerManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeerManager) Add(arg0 *supervisor.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockPeerManagerMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeerManager)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockPeerManager) Delete(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockPeerManagerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeerManager)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockPeerManager) Get(arg0 string) (*supervisor.Peer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*supervisor.Peer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerManagerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerManager)(nil).Get), arg0)
}

// GetPeers mocks base method.
func (m *MockPeerManager) GetPeers() *sync.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].(*sync.Map)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockPeerManagerMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockPeerManager)(nil).GetPeers))
}

// GetPeersByTask mocks base method.
func (m *MockPeerManager) GetPeersByTask(arg0 string) []*supervisor.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeersByTask", arg0)
	ret0, _ := ret[0].([]*supervisor.Peer)
	return ret0
}

// GetPeersByTask indicates an expected call of GetPeersByTask.
func (mr *MockPeerManagerMockRecorder) GetPeersByTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeersByTask", reflect.TypeOf((*MockPeerManager)(nil).GetPeersByTask), arg0)
}
